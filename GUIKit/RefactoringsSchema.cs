//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Opnieuw.Framework {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class OpnieuwConfiguration : DataSet {
        private LanguageListDataTable tableLanguageList;
        private LanguageDataTable tableLanguage;
        private RefactoringListDataTable tableRefactoringList;
        private RefactoringDataTable tableRefactoring;
        private PropertyListDataTable tablePropertyList;
        private PropertyDataTable tableProperty;
        private DataRelation relationLanguageList_Language;
        private DataRelation relationRefactoringList_Refactoring;
        private DataRelation relationPropertyList_Property;

        public OpnieuwConfiguration() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected OpnieuwConfiguration(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["LanguageList"] != null)) {
                    this.Tables.Add(new LanguageListDataTable(ds.Tables["LanguageList"]));
                }
                if ((ds.Tables["Language"] != null)) {
                    this.Tables.Add(new LanguageDataTable(ds.Tables["Language"]));
                }
                if ((ds.Tables["RefactoringList"] != null)) {
                    this.Tables.Add(new RefactoringListDataTable(ds.Tables["RefactoringList"]));
                }
                if ((ds.Tables["Refactoring"] != null)) {
                    this.Tables.Add(new RefactoringDataTable(ds.Tables["Refactoring"]));
                }
                if ((ds.Tables["PropertyList"] != null)) {
                    this.Tables.Add(new PropertyListDataTable(ds.Tables["PropertyList"]));
                }
                if ((ds.Tables["Property"] != null)) {
                    this.Tables.Add(new PropertyDataTable(ds.Tables["Property"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LanguageListDataTable LanguageList {
            get {
                return this.tableLanguageList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LanguageDataTable Language {
            get {
                return this.tableLanguage;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RefactoringListDataTable RefactoringList {
            get {
                return this.tableRefactoringList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RefactoringDataTable Refactoring {
            get {
                return this.tableRefactoring;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropertyListDataTable PropertyList {
            get {
                return this.tablePropertyList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropertyDataTable Property {
            get {
                return this.tableProperty;
            }
        }
        
        public override DataSet Clone() {
            OpnieuwConfiguration cln = ((OpnieuwConfiguration)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["LanguageList"] != null)) {
                this.Tables.Add(new LanguageListDataTable(ds.Tables["LanguageList"]));
            }
            if ((ds.Tables["Language"] != null)) {
                this.Tables.Add(new LanguageDataTable(ds.Tables["Language"]));
            }
            if ((ds.Tables["RefactoringList"] != null)) {
                this.Tables.Add(new RefactoringListDataTable(ds.Tables["RefactoringList"]));
            }
            if ((ds.Tables["Refactoring"] != null)) {
                this.Tables.Add(new RefactoringDataTable(ds.Tables["Refactoring"]));
            }
            if ((ds.Tables["PropertyList"] != null)) {
                this.Tables.Add(new PropertyListDataTable(ds.Tables["PropertyList"]));
            }
            if ((ds.Tables["Property"] != null)) {
                this.Tables.Add(new PropertyDataTable(ds.Tables["Property"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableLanguageList = ((LanguageListDataTable)(this.Tables["LanguageList"]));
            if ((this.tableLanguageList != null)) {
                this.tableLanguageList.InitVars();
            }
            this.tableLanguage = ((LanguageDataTable)(this.Tables["Language"]));
            if ((this.tableLanguage != null)) {
                this.tableLanguage.InitVars();
            }
            this.tableRefactoringList = ((RefactoringListDataTable)(this.Tables["RefactoringList"]));
            if ((this.tableRefactoringList != null)) {
                this.tableRefactoringList.InitVars();
            }
            this.tableRefactoring = ((RefactoringDataTable)(this.Tables["Refactoring"]));
            if ((this.tableRefactoring != null)) {
                this.tableRefactoring.InitVars();
            }
            this.tablePropertyList = ((PropertyListDataTable)(this.Tables["PropertyList"]));
            if ((this.tablePropertyList != null)) {
                this.tablePropertyList.InitVars();
            }
            this.tableProperty = ((PropertyDataTable)(this.Tables["Property"]));
            if ((this.tableProperty != null)) {
                this.tableProperty.InitVars();
            }
            this.relationLanguageList_Language = this.Relations["LanguageList_Language"];
            this.relationRefactoringList_Refactoring = this.Relations["RefactoringList_Refactoring"];
            this.relationPropertyList_Property = this.Relations["PropertyList_Property"];
        }
        
        private void InitClass() {
            this.DataSetName = "OpnieuwConfiguration";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RefacrotingsSchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableLanguageList = new LanguageListDataTable();
            this.Tables.Add(this.tableLanguageList);
            this.tableLanguage = new LanguageDataTable();
            this.Tables.Add(this.tableLanguage);
            this.tableRefactoringList = new RefactoringListDataTable();
            this.Tables.Add(this.tableRefactoringList);
            this.tableRefactoring = new RefactoringDataTable();
            this.Tables.Add(this.tableRefactoring);
            this.tablePropertyList = new PropertyListDataTable();
            this.Tables.Add(this.tablePropertyList);
            this.tableProperty = new PropertyDataTable();
            this.Tables.Add(this.tableProperty);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("LanguageList_Language", new DataColumn[] {
                        this.tableLanguageList.LanguageList_IdColumn}, new DataColumn[] {
                        this.tableLanguage.LanguageList_IdColumn});
            this.tableLanguage.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("RefactoringList_Refactoring", new DataColumn[] {
                        this.tableRefactoringList.RefactoringList_IdColumn}, new DataColumn[] {
                        this.tableRefactoring.RefactoringList_IdColumn});
            this.tableRefactoring.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("PropertyList_Property", new DataColumn[] {
                        this.tablePropertyList.PropertyList_IdColumn}, new DataColumn[] {
                        this.tableProperty.PropertyList_IdColumn});
            this.tableProperty.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationLanguageList_Language = new DataRelation("LanguageList_Language", new DataColumn[] {
                        this.tableLanguageList.LanguageList_IdColumn}, new DataColumn[] {
                        this.tableLanguage.LanguageList_IdColumn}, false);
            this.relationLanguageList_Language.Nested = true;
            this.Relations.Add(this.relationLanguageList_Language);
            this.relationRefactoringList_Refactoring = new DataRelation("RefactoringList_Refactoring", new DataColumn[] {
                        this.tableRefactoringList.RefactoringList_IdColumn}, new DataColumn[] {
                        this.tableRefactoring.RefactoringList_IdColumn}, false);
            this.relationRefactoringList_Refactoring.Nested = true;
            this.Relations.Add(this.relationRefactoringList_Refactoring);
            this.relationPropertyList_Property = new DataRelation("PropertyList_Property", new DataColumn[] {
                        this.tablePropertyList.PropertyList_IdColumn}, new DataColumn[] {
                        this.tableProperty.PropertyList_IdColumn}, false);
            this.relationPropertyList_Property.Nested = true;
            this.Relations.Add(this.relationPropertyList_Property);
        }
        
        private bool ShouldSerializeLanguageList() {
            return false;
        }
        
        private bool ShouldSerializeLanguage() {
            return false;
        }
        
        private bool ShouldSerializeRefactoringList() {
            return false;
        }
        
        private bool ShouldSerializeRefactoring() {
            return false;
        }
        
        private bool ShouldSerializePropertyList() {
            return false;
        }
        
        private bool ShouldSerializeProperty() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void LanguageListRowChangeEventHandler(object sender, LanguageListRowChangeEvent e);
        public delegate void LanguageRowChangeEventHandler(object sender, LanguageRowChangeEvent e);
        public delegate void RefactoringListRowChangeEventHandler(object sender, RefactoringListRowChangeEvent e);
        public delegate void RefactoringRowChangeEventHandler(object sender, RefactoringRowChangeEvent e);
        public delegate void PropertyListRowChangeEventHandler(object sender, PropertyListRowChangeEvent e);
        public delegate void PropertyRowChangeEventHandler(object sender, PropertyRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LanguageListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLanguageList_Id;
            
            internal LanguageListDataTable() : 
                    base("LanguageList") {
                this.InitClass();
            }
            
            internal LanguageListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LanguageList_IdColumn {
                get {
                    return this.columnLanguageList_Id;
                }
            }
            
            public LanguageListRow this[int index] {
                get {
                    return ((LanguageListRow)(this.Rows[index]));
                }
            }
            
            public event LanguageListRowChangeEventHandler LanguageListRowChanged;
            public event LanguageListRowChangeEventHandler LanguageListRowChanging;
            public event LanguageListRowChangeEventHandler LanguageListRowDeleted;
            public event LanguageListRowChangeEventHandler LanguageListRowDeleting;
            
            public void AddLanguageListRow(LanguageListRow row) {
                this.Rows.Add(row);
            }
            
            public LanguageListRow AddLanguageListRow() {
                LanguageListRow rowLanguageListRow = ((LanguageListRow)(this.NewRow()));
                rowLanguageListRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowLanguageListRow);
                return rowLanguageListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LanguageListDataTable cln = ((LanguageListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LanguageListDataTable();
            }
            
            internal void InitVars() {
                this.columnLanguageList_Id = this.Columns["LanguageList_Id"];
            }
            
            private void InitClass() {
                this.columnLanguageList_Id = new DataColumn("LanguageList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLanguageList_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnLanguageList_Id}, true));
                this.columnLanguageList_Id.AutoIncrement = true;
                this.columnLanguageList_Id.AllowDBNull = false;
                this.columnLanguageList_Id.Unique = true;
            }
            
            public LanguageListRow NewLanguageListRow() {
                return ((LanguageListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LanguageListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LanguageListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LanguageListRowChanged != null)) {
                    this.LanguageListRowChanged(this, new LanguageListRowChangeEvent(((LanguageListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LanguageListRowChanging != null)) {
                    this.LanguageListRowChanging(this, new LanguageListRowChangeEvent(((LanguageListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LanguageListRowDeleted != null)) {
                    this.LanguageListRowDeleted(this, new LanguageListRowChangeEvent(((LanguageListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LanguageListRowDeleting != null)) {
                    this.LanguageListRowDeleting(this, new LanguageListRowChangeEvent(((LanguageListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLanguageListRow(LanguageListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LanguageListRow : DataRow {
            
            private LanguageListDataTable tableLanguageList;
            
            internal LanguageListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLanguageList = ((LanguageListDataTable)(this.Table));
            }
            
            public LanguageRow[] GetLanguageRows() {
                return ((LanguageRow[])(this.GetChildRows(this.Table.ChildRelations["LanguageList_Language"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LanguageListRowChangeEvent : EventArgs {
            
            private LanguageListRow eventRow;
            
            private DataRowAction eventAction;
            
            public LanguageListRowChangeEvent(LanguageListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LanguageListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LanguageDataTable : DataTable, System.Collections.IEnumerable {
            private DataColumn columnName;
            private DataColumn columnCodeDomProviderClassName;
            private DataColumn columnViewControlerClassName;
            private DataColumn columnFriendlyName;
            private DataColumn columnLanguageList_Id;
            
            internal LanguageDataTable() : 
                    base("Language") {
                this.InitClass();
            }
            
            internal LanguageDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                   this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn CodeDomProviderClassNameColumn {
                get {
                    return this.columnCodeDomProviderClassName;
                }
            }
            
            internal DataColumn ViewControlerClassNameColumn {
                get {
                    return this.columnViewControlerClassName;
                }
            }
            
            internal DataColumn FriendlyNameColumn {
                get {
                    return this.columnFriendlyName;
                }
            }
            
            internal DataColumn LanguageList_IdColumn {
                get {
                    return this.columnLanguageList_Id;
                }
            }
            
            public LanguageRow this[int index] {
                get {
                    return ((LanguageRow)(this.Rows[index]));
                }
            }
            
            public event LanguageRowChangeEventHandler LanguageRowChanged;
            public event LanguageRowChangeEventHandler LanguageRowChanging;
            public event LanguageRowChangeEventHandler LanguageRowDeleted;
            public event LanguageRowChangeEventHandler LanguageRowDeleting;
            public void AddLanguageRow(LanguageRow row) {
                this.Rows.Add(row);
            }
            
            public LanguageRow AddLanguageRow(string Name, string CodeDomProviderClassName, string ViewControlerClassName, string FriendlyName, LanguageListRow parentLanguageListRowByLanguageList_Language) {
                LanguageRow rowLanguageRow = ((LanguageRow)(this.NewRow()));
                rowLanguageRow.ItemArray = new object[] {
                        Name,
                        CodeDomProviderClassName,
                        ViewControlerClassName,
                        FriendlyName,
                        parentLanguageListRowByLanguageList_Language[0]};
                this.Rows.Add(rowLanguageRow);
                return rowLanguageRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LanguageDataTable cln = ((LanguageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LanguageDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnCodeDomProviderClassName = this.Columns["CodeDomProviderClassName"];
                this.columnViewControlerClassName = this.Columns["ViewControlerClassName"];
                this.columnFriendlyName = this.Columns["FriendlyName"];
                this.columnLanguageList_Id = this.Columns["LanguageList_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnCodeDomProviderClassName = new DataColumn("CodeDomProviderClassName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCodeDomProviderClassName);
                this.columnViewControlerClassName = new DataColumn("ViewControlerClassName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnViewControlerClassName);
                this.columnFriendlyName = new DataColumn("FriendlyName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFriendlyName);
                this.columnLanguageList_Id = new DataColumn("LanguageList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLanguageList_Id);
                this.columnName.Namespace = "";
                this.columnCodeDomProviderClassName.Namespace = "";
                this.columnViewControlerClassName.Namespace = "";
                this.columnFriendlyName.Namespace = "";
            }
            
            public LanguageRow NewLanguageRow() {
                return ((LanguageRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LanguageRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LanguageRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LanguageRowChanged != null)) {
                    this.LanguageRowChanged(this, new LanguageRowChangeEvent(((LanguageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LanguageRowChanging != null)) {
                    this.LanguageRowChanging(this, new LanguageRowChangeEvent(((LanguageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LanguageRowDeleted != null)) {
                    this.LanguageRowDeleted(this, new LanguageRowChangeEvent(((LanguageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LanguageRowDeleting != null)) {
                    this.LanguageRowDeleting(this, new LanguageRowChangeEvent(((LanguageRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLanguageRow(LanguageRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LanguageRow : DataRow {
            
            private LanguageDataTable tableLanguage;
            
            internal LanguageRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLanguage = ((LanguageDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLanguage.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguage.NameColumn] = value;
                }
            }
            
            public string CodeDomProviderClassName {
                get {
                    try {
                        return ((string)(this[this.tableLanguage.CodeDomProviderClassNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguage.CodeDomProviderClassNameColumn] = value;
                }
            }
            
            public string ViewControlerClassName {
                get {
                    try {
                        return ((string)(this[this.tableLanguage.ViewControlerClassNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguage.ViewControlerClassNameColumn] = value;
                }
            }
            
            public string FriendlyName {
                get {
                    try {
                        return ((string)(this[this.tableLanguage.FriendlyNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguage.FriendlyNameColumn] = value;
                }
            }
            
            public LanguageListRow LanguageListRow {
                get {
                    return ((LanguageListRow)(this.GetParentRow(this.Table.ParentRelations["LanguageList_Language"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LanguageList_Language"]);
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableLanguage.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableLanguage.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeDomProviderClassNameNull() {
                return this.IsNull(this.tableLanguage.CodeDomProviderClassNameColumn);
            }
            
            public void SetCodeDomProviderClassNameNull() {
                this[this.tableLanguage.CodeDomProviderClassNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsViewControlerClassNameNull() {
                return this.IsNull(this.tableLanguage.ViewControlerClassNameColumn);
            }
            
            public void SetViewControlerClassNameNull() {
                this[this.tableLanguage.ViewControlerClassNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFriendlyNameNull() {
                return this.IsNull(this.tableLanguage.FriendlyNameColumn);
            }
            
            public void SetFriendlyNameNull() {
                this[this.tableLanguage.FriendlyNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LanguageRowChangeEvent : EventArgs {
            
            private LanguageRow eventRow;
            private DataRowAction eventAction;
            public LanguageRowChangeEvent(LanguageRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LanguageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RefactoringListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRefactoringList_Id;
            internal RefactoringListDataTable() : 
                    base("RefactoringList") {
                this.InitClass();
            }
            
            internal RefactoringListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RefactoringList_IdColumn {
                get {
                    return this.columnRefactoringList_Id;
                }
            }
            
            public RefactoringListRow this[int index] {
                get {
                    return ((RefactoringListRow)(this.Rows[index]));
                }
            }
            
            public event RefactoringListRowChangeEventHandler RefactoringListRowChanged;
            public event RefactoringListRowChangeEventHandler RefactoringListRowChanging;
            public event RefactoringListRowChangeEventHandler RefactoringListRowDeleted;
            public event RefactoringListRowChangeEventHandler RefactoringListRowDeleting;
            public void AddRefactoringListRow(RefactoringListRow row) {
                this.Rows.Add(row);
            }
            
            public RefactoringListRow AddRefactoringListRow() {
                RefactoringListRow rowRefactoringListRow = ((RefactoringListRow)(this.NewRow()));
                rowRefactoringListRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowRefactoringListRow);
                return rowRefactoringListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RefactoringListDataTable cln = ((RefactoringListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RefactoringListDataTable();
            }
            
            internal void InitVars() {
                this.columnRefactoringList_Id = this.Columns["RefactoringList_Id"];
            }
            
            private void InitClass() {
                this.columnRefactoringList_Id = new DataColumn("RefactoringList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnRefactoringList_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnRefactoringList_Id}, true));
                this.columnRefactoringList_Id.AutoIncrement = true;
                this.columnRefactoringList_Id.AllowDBNull = false;
                this.columnRefactoringList_Id.Unique = true;
            }
            
            public RefactoringListRow NewRefactoringListRow() {
                return ((RefactoringListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RefactoringListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RefactoringListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RefactoringListRowChanged != null)) {
                    this.RefactoringListRowChanged(this, new RefactoringListRowChangeEvent(((RefactoringListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RefactoringListRowChanging != null)) {
                    this.RefactoringListRowChanging(this, new RefactoringListRowChangeEvent(((RefactoringListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RefactoringListRowDeleted != null)) {
                    this.RefactoringListRowDeleted(this, new RefactoringListRowChangeEvent(((RefactoringListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RefactoringListRowDeleting != null)) {
                    this.RefactoringListRowDeleting(this, new RefactoringListRowChangeEvent(((RefactoringListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRefactoringListRow(RefactoringListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RefactoringListRow : DataRow {
            
            private RefactoringListDataTable tableRefactoringList;
            
            internal RefactoringListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRefactoringList = ((RefactoringListDataTable)(this.Table));
            }
            
            public RefactoringRow[] GetRefactoringRows() {
                return ((RefactoringRow[])(this.GetChildRows(this.Table.ChildRelations["RefactoringList_Refactoring"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RefactoringListRowChangeEvent : EventArgs {
            
            private RefactoringListRow eventRow;
            
            private DataRowAction eventAction;
            
            public RefactoringListRowChangeEvent(RefactoringListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RefactoringListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RefactoringDataTable : DataTable, System.Collections.IEnumerable {
            private DataColumn columnName;
            private DataColumn columnAssemblyName;
            private DataColumn columnGUIClassName;
            private DataColumn columnClassName;
            private DataColumn columnFriendlyName;
            private DataColumn columnRefactoringList_Id;
            
            internal RefactoringDataTable() : 
                    base("Refactoring") {
                this.InitClass();
            }
            
            internal RefactoringDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            internal DataColumn AssemblyNameColumn
            {
                get
                {
                    return this.columnAssemblyName;
                }
            }
            
            internal DataColumn GUIClassNameColumn {
                get {
                    return this.columnGUIClassName;
                }
            }
            
            internal DataColumn ClassNameColumn {
                get {
                    return this.columnClassName;
                }
            }
            
            internal DataColumn FriendlyNameColumn {
                get {
                    return this.columnFriendlyName;
                }
            }
            
            internal DataColumn RefactoringList_IdColumn {
                get {
                    return this.columnRefactoringList_Id;
                }
            }
            
            public RefactoringRow this[int index] {
                get {
                    return ((RefactoringRow)(this.Rows[index]));
                }
            }
            
            public event RefactoringRowChangeEventHandler RefactoringRowChanged;
            public event RefactoringRowChangeEventHandler RefactoringRowChanging;
            public event RefactoringRowChangeEventHandler RefactoringRowDeleted;
            public event RefactoringRowChangeEventHandler RefactoringRowDeleting;
            public void AddRefactoringRow(RefactoringRow row) {
                this.Rows.Add(row);

            }

            public RefactoringRow AddRefactoringRow(string Name, string AssemblyName, string GUIClassName, string ClassName, string FriendlyName, RefactoringListRow parentRefactoringListRowByRefactoringList_Refactoring)
            {
                RefactoringRow rowRefactoringRow = ((RefactoringRow)(this.NewRow()));
                rowRefactoringRow.ItemArray = new object[] {
                        Name,
                        AssemblyName,
                        GUIClassName,
                        ClassName,
                        FriendlyName,
                        parentRefactoringListRowByRefactoringList_Refactoring[0]};
                this.Rows.Add(rowRefactoringRow);
                return rowRefactoringRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RefactoringDataTable cln = ((RefactoringDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RefactoringDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnAssemblyName = this.Columns["AssemblyName"];
                this.columnGUIClassName = this.Columns["GUIClassName"];
                this.columnClassName = this.Columns["ClassName"];
                this.columnFriendlyName = this.Columns["FriendlyName"];
                this.columnRefactoringList_Id = this.Columns["RefactoringList_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnAssemblyName = new DataColumn("AssemblyName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssemblyName);
                this.columnGUIClassName = new DataColumn("GUIClassName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGUIClassName);
                this.columnClassName = new DataColumn("ClassName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClassName);
                this.columnFriendlyName = new DataColumn("FriendlyName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFriendlyName);
                this.columnRefactoringList_Id = new DataColumn("RefactoringList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnRefactoringList_Id);
                this.columnName.AllowDBNull = false;
                this.columnGUIClassName.AllowDBNull = false;
                this.columnClassName.AllowDBNull = false;
                this.columnFriendlyName.AllowDBNull = false;
            }
            
            public RefactoringRow NewRefactoringRow() {
                return ((RefactoringRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RefactoringRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RefactoringRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RefactoringRowChanged != null)) {
                    this.RefactoringRowChanged(this, new RefactoringRowChangeEvent(((RefactoringRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RefactoringRowChanging != null)) {
                    this.RefactoringRowChanging(this, new RefactoringRowChangeEvent(((RefactoringRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RefactoringRowDeleted != null)) {
                    this.RefactoringRowDeleted(this, new RefactoringRowChangeEvent(((RefactoringRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RefactoringRowDeleting != null)) {
                    this.RefactoringRowDeleting(this, new RefactoringRowChangeEvent(((RefactoringRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRefactoringRow(RefactoringRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RefactoringRow : DataRow {
            private RefactoringDataTable tableRefactoring;
            internal RefactoringRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRefactoring = ((RefactoringDataTable)(this.Table));
            }
           
            public string Name {
                get {
                    return ((string)(this[this.tableRefactoring.NameColumn]));
                }
                set {
                    this[this.tableRefactoring.NameColumn] = value;
                }
            }

            public string AssemblyName
            {
                get
                {
                    return ((string)(this[this.tableRefactoring.AssemblyNameColumn]));
                }
                set
                {
                    this[this.tableRefactoring.AssemblyNameColumn] = value;
                }
            }
 
            public string GUIClassName {
                get {
                    return ((string)(this[this.tableRefactoring.GUIClassNameColumn]));
                }
                set {
                    this[this.tableRefactoring.GUIClassNameColumn] = value;
                }
            }
            
            public string ClassName {
                get {
                    return ((string)(this[this.tableRefactoring.ClassNameColumn]));
                }
                set {
                    this[this.tableRefactoring.ClassNameColumn] = value;
                }
            }
            
            public string FriendlyName {
                get {
                    return ((string)(this[this.tableRefactoring.FriendlyNameColumn]));
                }
                set {
                    this[this.tableRefactoring.FriendlyNameColumn] = value;
                }
            }
            
            public RefactoringListRow RefactoringListRow {
                get {
                    return ((RefactoringListRow)(this.GetParentRow(this.Table.ParentRelations["RefactoringList_Refactoring"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RefactoringList_Refactoring"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RefactoringRowChangeEvent : EventArgs {
            
            private RefactoringRow eventRow;
            
            private DataRowAction eventAction;
            
            public RefactoringRowChangeEvent(RefactoringRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RefactoringRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPropertyList_Id;
            
            internal PropertyListDataTable() : 
                    base("PropertyList") {
                this.InitClass();
            }
            
            internal PropertyListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PropertyList_IdColumn {
                get {
                    return this.columnPropertyList_Id;
                }
            }
            
            public PropertyListRow this[int index] {
                get {
                    return ((PropertyListRow)(this.Rows[index]));
                }
            }
            
            public event PropertyListRowChangeEventHandler PropertyListRowChanged;
            public event PropertyListRowChangeEventHandler PropertyListRowChanging;
            public event PropertyListRowChangeEventHandler PropertyListRowDeleted;
            public event PropertyListRowChangeEventHandler PropertyListRowDeleting;

            public void AddPropertyListRow(PropertyListRow row) {
                this.Rows.Add(row);
            }
            
            public PropertyListRow AddPropertyListRow() {
                PropertyListRow rowPropertyListRow = ((PropertyListRow)(this.NewRow()));
                rowPropertyListRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowPropertyListRow);
                return rowPropertyListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PropertyListDataTable cln = ((PropertyListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PropertyListDataTable();
            }
            
            internal void InitVars() {
                this.columnPropertyList_Id = this.Columns["PropertyList_Id"];
            }
            
            private void InitClass() {
                this.columnPropertyList_Id = new DataColumn("PropertyList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPropertyList_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPropertyList_Id}, true));
                this.columnPropertyList_Id.AutoIncrement = true;
                this.columnPropertyList_Id.AllowDBNull = false;
                this.columnPropertyList_Id.Unique = true;
            }
            
           public PropertyListRow NewPropertyListRow() {
                return ((PropertyListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PropertyListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PropertyListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropertyListRowChanged != null)) {
                    this.PropertyListRowChanged(this, new PropertyListRowChangeEvent(((PropertyListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropertyListRowChanging != null)) {
                    this.PropertyListRowChanging(this, new PropertyListRowChangeEvent(((PropertyListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropertyListRowDeleted != null)) {
                    this.PropertyListRowDeleted(this, new PropertyListRowChangeEvent(((PropertyListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropertyListRowDeleting != null)) {
                    this.PropertyListRowDeleting(this, new PropertyListRowChangeEvent(((PropertyListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePropertyListRow(PropertyListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyListRow : DataRow {
            
            private PropertyListDataTable tablePropertyList;
            
            internal PropertyListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePropertyList = ((PropertyListDataTable)(this.Table));
            }
            
            public PropertyRow[] GetPropertyRows() {
                return ((PropertyRow[])(this.GetChildRows(this.Table.ChildRelations["PropertyList_Property"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyListRowChangeEvent : EventArgs {
            
            private PropertyListRow eventRow;
            
            private DataRowAction eventAction;
            
            public PropertyListRowChangeEvent(PropertyListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PropertyListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyDataTable : DataTable, System.Collections.IEnumerable {
            private DataColumn columnName;
            private DataColumn columnValue;
            private DataColumn columnPropertyList_Id;
            
            internal PropertyDataTable() : 
                    base("Property") {
                this.InitClass();
            }
            
            internal PropertyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn PropertyList_IdColumn {
                get {
                    return this.columnPropertyList_Id;
                }
            }
            
            public PropertyRow this[int index] {
                get {
                    return ((PropertyRow)(this.Rows[index]));
                }
            }
            
            public event PropertyRowChangeEventHandler PropertyRowChanged;
            public event PropertyRowChangeEventHandler PropertyRowChanging;
            public event PropertyRowChangeEventHandler PropertyRowDeleted;
            public event PropertyRowChangeEventHandler PropertyRowDeleting;
            
            public void AddPropertyRow(PropertyRow row) {
                this.Rows.Add(row);
            }
           
            public PropertyRow AddPropertyRow(string Name, string Value, PropertyListRow parentPropertyListRowByPropertyList_Property) {
                PropertyRow rowPropertyRow = ((PropertyRow)(this.NewRow()));
                rowPropertyRow.ItemArray = new object[] {
                        Name,
                        Value,
                        parentPropertyListRowByPropertyList_Property[0]};
                this.Rows.Add(rowPropertyRow);
                return rowPropertyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PropertyDataTable cln = ((PropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PropertyDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnValue = this.Columns["Value"];
                this.columnPropertyList_Id = this.Columns["PropertyList_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnValue = new DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnValue);
                this.columnPropertyList_Id = new DataColumn("PropertyList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPropertyList_Id);
                this.columnName.Namespace = "";
                this.columnValue.Namespace = "";
            }
            
            public PropertyRow NewPropertyRow() {
                return ((PropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PropertyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropertyRowChanged != null)) {
                    this.PropertyRowChanged(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropertyRowChanging != null)) {
                    this.PropertyRowChanging(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropertyRowDeleted != null)) {
                    this.PropertyRowDeleted(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropertyRowDeleting != null)) {
                    this.PropertyRowDeleting(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePropertyRow(PropertyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyRow : DataRow {
            
            private PropertyDataTable tableProperty;
            
            internal PropertyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProperty = ((PropertyDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableProperty.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.NameColumn] = value;
                }
            }
            
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableProperty.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperty.ValueColumn] = value;
                }
            }
            
            public PropertyListRow PropertyListRow {
                get {
                    return ((PropertyListRow)(this.GetParentRow(this.Table.ParentRelations["PropertyList_Property"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PropertyList_Property"]);
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableProperty.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableProperty.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableProperty.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableProperty.ValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyRowChangeEvent : EventArgs {
            
            private PropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public PropertyRowChangeEvent(PropertyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
