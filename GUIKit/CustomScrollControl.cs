#region Copyright (C) Pierre Boudreau
//This file is part of the Opnieuw project.
//
//pierre@opnieuw.com
//http://www.opnieuw.com
//
//This program is free software; you can redistribute it and/or modify it 
//under the terms of the GNU General Public License as published by the Free
//Software Foundation; either version 2 of the License, or (at your option)
//any later version.
//
//This program is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
//more details.
//
//You should have received a copy of the GNU General Public License along 
//with this program; 
//if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#endregion
using System;using System.Collections;using System.ComponentModel;using System.Drawing;using System.Data;using System.Windows.Forms;namespace Opnieuw.Framework{	public class ScrollPositionChangedEventArgs : EventArgs	{		private int m_NewValue;		private int m_OldValue;		public int NewValue		{			get{return m_NewValue;}		}		public int OldValue		{			get{return m_OldValue;}		}		public int Delta		{			get{return m_OldValue-m_NewValue;}		}		public ScrollPositionChangedEventArgs(int p_NewValue, int p_OldValue)		{			m_NewValue = p_NewValue;			m_OldValue = p_OldValue;		}	}	public delegate void ScrollPositionChangedEventHandler(object sender, ScrollPositionChangedEventArgs e);	/// <summary>	/// Summary description for CustomScrollControl.	/// </summary>	public class CustomScrollControl : ScrollableControl	{		/// <summary> 		/// Required designer variable.		/// </summary>		private System.ComponentModel.Container components = null;		public CustomScrollControl()		{			// This call is required by the Windows.Forms Form Designer.			InitializeComponent();			base.AutoScroll = false;			ControlRemoved += new ControlEventHandler(Controls_Removed);		}		/// <summary> 		/// Clean up any resources being used.		/// </summary>		protected override void Dispose( bool disposing )		{			if( disposing )			{				if(components != null)				{					components.Dispose();				}			}			base.Dispose( disposing );		}		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			components = new System.ComponentModel.Container();
		}
		#endregion		[Browsable(false)]		public override bool AutoScroll		{			get{return false;}			set			{				if (value)					throw new ApplicationException("Auto Scroll not supported in this control");				base.AutoScroll = false;			}		}		protected VScrollBar m_VScroll = null;		protected HScrollBar m_HScroll = null;		private Panel m_BottomRightPanel = null;		protected Size m_CustomScrollArea = new Size(0,0);		[Browsable(false)]		public virtual Size CustomScrollArea		{			get{return m_CustomScrollArea;}			set			{				m_CustomScrollArea = value;				RecalcCustomScrollBars();			}		}		protected Bitmap _wholeFileImage = null;		protected Bitmap _backBuffer = null;

        private Point m_CustomScrollPosition = new Point(0,0);
        [Browsable(false)]		public virtual Point CustomScrollPosition		{			get			{
                return new Point(-m_CustomScrollPosition.X, -m_CustomScrollPosition.Y);
            }			set			{
                m_CustomScrollPosition = value;
                if (m_HScroll!=null)
                    m_HScroll.Value = -m_CustomScrollPosition.X;

                if (m_VScroll!=null)
                    m_VScroll.Value = -m_CustomScrollPosition.Y;
            }		}		[Browsable(false)]		public virtual Rectangle CustomClientRectangle		{			get			{				int l_ScrollH = 0;				if (m_HScroll!=null)					l_ScrollH = m_HScroll.Height;				int l_ScrollV = 0;				if (m_VScroll!=null)					l_ScrollV = m_VScroll.Width;				if (m_HScroll!=null || m_VScroll != null)					return new Rectangle(ClientRectangle.X,ClientRectangle.Y,										ClientRectangle.Width-l_ScrollV, ClientRectangle.Height-l_ScrollH);				else					return ClientRectangle;			}		}		protected virtual void RemoveHScrollBar()		{			if (m_HScroll != null)			{				m_HScroll.ValueChanged -= new EventHandler(HScroll_Change);				Controls.Remove(m_HScroll);				m_HScroll.Dispose();				m_HScroll = null;			}		}		protected virtual void RemoveVScrollBar()		{			if (m_VScroll != null)			{				m_VScroll.ValueChanged -= new EventHandler(VScroll_Change);				Controls.Remove(m_VScroll);				m_VScroll.Dispose();				m_VScroll = null;			}				}		protected virtual void RecalcHScrollBar()		{			if (m_HScroll != null)			{				int l_WidthVScroll = 0;				if (m_VScroll != null)					l_WidthVScroll = m_VScroll.Width;				m_HScroll.Location = new Point(0,ClientRectangle.Height-m_HScroll.Height);				m_HScroll.Width = ClientRectangle.Width-l_WidthVScroll;				m_HScroll.Minimum = 0;				m_HScroll.Maximum = Math.Max(0,m_CustomScrollArea.Width); //Math.Max(0,m_CustomScrollArea.Width - ClientRectangle.Width) + m_VScroll.Width;				m_HScroll.LargeChange = Math.Max(5,ClientRectangle.Width - l_WidthVScroll);				m_HScroll.SmallChange = m_HScroll.LargeChange / 5;
                m_HScroll.Value = m_CustomScrollPosition.X;
                m_HScroll.BringToFront();				m_RealClientHeight = ClientRectangle.Height-l_WidthVScroll;			}		}				protected virtual void RecalcVScrollBar()		{			if (m_VScroll != null)			{				int l_HeightHScroll = 0;				if (m_HScroll != null)					l_HeightHScroll = m_HScroll.Height;				m_VScroll.Location = new Point(ClientRectangle.Width-m_VScroll.Width,0);				m_VScroll.Height = ClientRectangle.Height-l_HeightHScroll;				m_VScroll.Minimum = 0;				m_VScroll.Maximum = Math.Max(0,m_CustomScrollArea.Height); //Math.Max(0,m_CustomScrollArea.Height - ClientRectangle.Height) + m_HScroll.Height;				m_VScroll.LargeChange = Math.Max(5,ClientRectangle.Height - l_HeightHScroll);				m_VScroll.SmallChange = m_VScroll.LargeChange / 5;
                m_VScroll.Value = m_CustomScrollPosition.Y;
                m_VScroll.BringToFront();
                m_RealClientWidth = ClientRectangle.Width-l_HeightHScroll;			}		}						protected int m_RealClientWidth = 0;		protected int m_RealClientHeight = 0;		protected Rectangle m_AdjustedClientRectangle = new Rectangle(0, 0, 0, 0);		protected Rectangle AdjustedClientRectangle {			get {				return m_AdjustedClientRectangle;			}		}		[Browsable(false)]		public virtual int MaximumVScroll		{			get			{				if (m_VScroll == null)					return 0;				else					return m_VScroll.Maximum;			}		}		[Browsable(false)]		public virtual int MinimumVScroll		{			get			{				return 0;			}		}		[Browsable(false)]		public virtual int MinimumHScroll		{			get			{				return 0;			}		}		[Browsable(false)]		public virtual int MaximumHScroll		{			get			{				if (m_HScroll == null)					return 0;				else					return m_HScroll.Maximum;			}		}		public virtual void RecalcCustomScrollBars()		{			Rectangle l_Client = ClientRectangle;			if (l_Client.Height < m_CustomScrollArea.Height && l_Client.Width < m_CustomScrollArea.Width)			{				if (m_VScroll == null)				{					m_VScroll = new VScrollBar();					m_VScroll.ValueChanged += new EventHandler(VScroll_Change);					Controls.Add(m_VScroll);				}				if (m_HScroll == null)				{					m_HScroll = new HScrollBar();					m_HScroll.ValueChanged += new EventHandler(HScroll_Change);					Controls.Add(m_HScroll);				}			}			else if (l_Client.Height < m_CustomScrollArea.Height )			{				if (m_VScroll == null)				{					m_VScroll = new VScrollBar();					m_VScroll.ValueChanged += new EventHandler(VScroll_Change);					Controls.Add(m_VScroll);				}				m_OldHScrollValue = 0;				RemoveHScrollBar();				if (m_BottomRightPanel!=null)				{					Controls.Remove(m_BottomRightPanel);					m_BottomRightPanel.Dispose();					m_BottomRightPanel = null;				}						}			else if (l_Client.Width < m_CustomScrollArea.Width)			{				if (m_HScroll == null)				{					m_HScroll = new HScrollBar();					m_HScroll.ValueChanged += new EventHandler(HScroll_Change);					Controls.Add(m_HScroll);				}				m_OldVScrollValue = 0;				RemoveVScrollBar();				if (m_BottomRightPanel!=null)				{					Controls.Remove(m_BottomRightPanel);					m_BottomRightPanel.Dispose();					m_BottomRightPanel = null;				}						}			else			{				m_OldHScrollValue = 0;				m_OldVScrollValue = 0;				RemoveVScrollBar();				RemoveHScrollBar();				if (m_BottomRightPanel!=null)				{					Controls.Remove(m_BottomRightPanel);					m_BottomRightPanel.Dispose();					m_BottomRightPanel = null;				}			}			RecalcVScrollBar();			RecalcHScrollBar();						m_AdjustedClientRectangle = new Rectangle(ClientRectangle.X, ClientRectangle.Y, m_RealClientWidth, m_RealClientHeight);			if (m_HScroll != null && m_VScroll != null)			{				if (m_BottomRightPanel==null)				{					m_BottomRightPanel = new Panel();					m_BottomRightPanel.BackColor = Color.FromKnownColor(KnownColor.Control);					Controls.Add(m_BottomRightPanel);				}				m_BottomRightPanel.Location = new Point(m_HScroll.Right,m_VScroll.Bottom);				m_BottomRightPanel.Size = new Size(m_VScroll.Width,m_HScroll.Height);				m_BottomRightPanel.BringToFront();			}		}		protected override void OnSizeChanged(EventArgs e)		{			base.OnSizeChanged(e);			RecalcCustomScrollBars();		}		private int m_OldVScrollValue = 0;		protected virtual void VScroll_Change(object sender, EventArgs e)		{
            m_CustomScrollPosition.Y = m_VScroll.Value;
            OnVScrollPositionChanged(new ScrollPositionChangedEventArgs(-m_VScroll.Value,-m_OldVScrollValue));			Invalidate(true);			m_OldVScrollValue = m_VScroll.Value;			if (_wholeFileImage != null)			{				Point csp = CustomScrollPosition;			}		}		private int m_OldHScrollValue = 0;		protected virtual void HScroll_Change(object sender, EventArgs e)		{
            m_CustomScrollPosition.X = m_HScroll.Value;
            OnHScrollPositionChanged(new ScrollPositionChangedEventArgs(-m_HScroll.Value,-m_OldHScrollValue));			Invalidate(true);			m_OldHScrollValue = m_HScroll.Value;			if (_wholeFileImage != null)			{				Point csp = CustomScrollPosition;			}		}		public event ScrollPositionChangedEventHandler VScrollPositionChanged;		protected virtual void OnVScrollPositionChanged(ScrollPositionChangedEventArgs e)		{			foreach(Control c in Controls)			{				if (c != m_HScroll && c != m_VScroll && c != m_BottomRightPanel && m_NotScrollableControls.Contains(c) == false && c.Dock == DockStyle.None)					c.Top -= e.Delta;			}			if (VScrollPositionChanged!=null)				VScrollPositionChanged(this,e);		}		public event ScrollPositionChangedEventHandler HScrollPositionChanged;		protected virtual void OnHScrollPositionChanged(ScrollPositionChangedEventArgs e)		{			foreach(Control c in Controls)			{				if (c != m_HScroll && c != m_VScroll && c != m_BottomRightPanel && m_NotScrollableControls.Contains(c) == false && c.Dock == DockStyle.None)					c.Left -= e.Delta;			}			if (HScrollPositionChanged!=null)				HScrollPositionChanged(this,e);		}		private ArrayList m_NotScrollableControls = new ArrayList();		public void AddNotScrollableControls(Control p_Control)		{			m_NotScrollableControls.Add(p_Control);		}		public void RemoveNotScrollableControls(Control p_Control)		{			if (m_NotScrollableControls.Contains(p_Control))				m_NotScrollableControls.Remove(p_Control);		}		private void Controls_Removed(object sender, ControlEventArgs e)		{			RemoveNotScrollableControls(e.Control);		}		public virtual void CustomScrollPageDown()		{			if (m_VScroll!=null)				m_VScroll.Value = Math.Min(m_VScroll.Value + m_VScroll.LargeChange, m_VScroll.Maximum);		}		public virtual void CustomScrollPageUp()		{			if (m_VScroll!=null)				m_VScroll.Value = Math.Max(m_VScroll.Value - m_VScroll.LargeChange, m_VScroll.Minimum);		}		public virtual void CustomScrollPageRight()		{			if (m_HScroll!=null)				m_HScroll.Value = Math.Min(m_HScroll.Value + m_HScroll.LargeChange, m_HScroll.Maximum);		}		public virtual void CustomScrollPageLeft()		{			if (m_HScroll!=null)				m_HScroll.Value = Math.Max(m_HScroll.Value - m_HScroll.LargeChange, m_HScroll.Minimum);		}		public virtual void CustomScrollLineDown()		{			if (m_VScroll!=null)				m_VScroll.Value = Math.Min(m_VScroll.Value + m_VScroll.SmallChange, m_VScroll.Maximum);		}		public virtual void CustomScrollLineUp()		{			if (m_VScroll!=null)				m_VScroll.Value = Math.Max(m_VScroll.Value - m_VScroll.SmallChange, m_VScroll.Minimum);		}		public virtual void CustomScrollLineRight()		{			if (m_HScroll!=null)				m_HScroll.Value = Math.Min(m_HScroll.Value + m_HScroll.SmallChange, m_HScroll.Maximum);		}		public virtual void CustomScrollLineLeft()		{			if (m_HScroll!=null)				m_HScroll.Value = Math.Max(m_HScroll.Value - m_HScroll.SmallChange, m_HScroll.Minimum);		}	}}